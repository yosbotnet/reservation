generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model allergia {
  id_allergia  Int      @id @default(autoincrement())
  cf           String   @db.VarChar(16)
  nomeallergia String   @db.VarChar(100)
  paziente     paziente @relation(fields: [cf], references: [cf], onDelete: Cascade)
}

model attivita {
  id_attivita Int         @id @default(autoincrement())
  nome        String      @unique @db.VarChar(100)
  daevitare   daevitare[]
}

model attrezzatura {
  id_attrezzatura       Int                     @id @default(autoincrement())
  nome                  String                  @unique @db.VarChar(100)
  contiene              contiene[]
  richiede_attrezzatura richiede_attrezzatura[]
}

model contiene {
  id_sala         Int
  id_attrezzatura Int
  attrezzatura    attrezzatura   @relation(fields: [id_attrezzatura], references: [id_attrezzatura], onDelete: NoAction)
  sala_operativa  sala_operativa @relation(fields: [id_sala], references: [id_sala], onDelete: NoAction)

  @@id([id_sala, id_attrezzatura])
}

model cura_postoperativa {
  id_cura       Int          @id @default(autoincrement())
  id_intervento Int
  descrizione   String       @db.Text
  intervento    intervento   @relation(fields: [id_intervento], references: [id_intervento], onDelete: NoAction)
  daevitare     daevitare[]
  daprendere    daprendere[]
}

model daevitare {
  id_cura            Int
  id_attivita        Int
  perche             String             @db.Text
  attivita           attivita           @relation(fields: [id_attivita], references: [id_attivita], onDelete: NoAction)
  cura_postoperativa cura_postoperativa @relation(fields: [id_cura], references: [id_cura], onDelete: Cascade)

  @@id([id_cura, id_attivita])
}

model daprendere {
  id_cura            Int
  id_farmaco         Int
  frequenza          String             @db.VarChar(50)
  cura_postoperativa cura_postoperativa @relation(fields: [id_cura], references: [id_cura], onDelete: Cascade)
  farmaco            farmaco            @relation(fields: [id_farmaco], references: [id_farmaco], onDelete: NoAction)

  @@id([id_cura, id_farmaco])
}

model dottore {
  cf                  String             @id @db.VarChar(16)
  numeroregistrazione String             @unique @db.VarChar(20)
  dataassunzione      DateTime           @db.Date
  iban                String             @db.VarChar(34)
  utente              utente             @relation(fields: [cf], references: [cf], onDelete: NoAction)
  intervento          intervento[]
  orariodilavoro      orariodilavoro[]
  specializzato_in    specializzato_in[]
  visita              visita[]
}

model farmaco {
  id_farmaco Int          @id @default(autoincrement())
  nome       String       @unique @db.VarChar(100)
  daprendere daprendere[]
}

model intervento {
  id_intervento      Int                  @id @default(autoincrement())
  cf_paziente        String               @db.VarChar(16)
  cf_dottore         String               @db.VarChar(16)
  id_tipo            Int
  id_sala            Int
  dataoranizio       DateTime             @db.Timestamp(6)
  dataorafine        DateTime             @db.Timestamp(6)
  esito              intervention_status  @default(programmato)
  cura_postoperativa cura_postoperativa[]
  dottore            dottore              @relation(fields: [cf_dottore], references: [cf], onDelete: NoAction)
  paziente           paziente             @relation(fields: [cf_paziente], references: [cf], onDelete: NoAction)
  sala_operativa     sala_operativa       @relation(fields: [id_sala], references: [id_sala], onDelete: NoAction)
  tipo_intervento    tipo_intervento      @relation(fields: [id_tipo], references: [id_tipo], onDelete: NoAction)

  @@index([dataoranizio], map: "idx_intervento_data")
}

model orariodilavoro {
  cf                   String   @db.VarChar(16)
  giornodellasettimana weekday
  orainizio            DateTime @db.Time(6)
  orafine              DateTime @db.Time(6)
  dottore              dottore  @relation(fields: [cf], references: [cf], onDelete: Cascade)

  @@id([cf, giornodellasettimana, orainizio])
  @@index([giornodellasettimana], map: "idx_orari_giorno")
}

model paziente {
  cf              String       @id @db.VarChar(16)
  grupposanguigno blood_group
  allergia        allergia[]
  intervento      intervento[]
  utente          utente       @relation(fields: [cf], references: [cf], onDelete: NoAction)
  visita          visita[]
}

model richiede_attrezzatura {
  id_tipo         Int
  id_attrezzatura Int
  attrezzatura    attrezzatura    @relation(fields: [id_attrezzatura], references: [id_attrezzatura], onDelete: NoAction)
  tipo_intervento tipo_intervento @relation(fields: [id_tipo], references: [id_tipo], onDelete: NoAction)

  @@id([id_tipo, id_attrezzatura])
}

model sala_operativa {
  id_sala    Int          @id @default(autoincrement())
  nome       String       @unique @db.VarChar(50)
  contiene   contiene[]
  intervento intervento[]
}

model specializzato_in {
  cf                  String           @db.VarChar(16)
  id_specializzazione Int
  dottore             dottore          @relation(fields: [cf], references: [cf], onDelete: Cascade)
  specializzazione    specializzazione @relation(fields: [id_specializzazione], references: [id_specializzazione], onDelete: NoAction)

  @@id([cf, id_specializzazione])
}

model specializzazione {
  id_specializzazione Int                @id @default(autoincrement())
  nome                String             @unique @db.VarChar(100)
  specializzato_in    specializzato_in[]
}

model tipo_intervento {
  id_tipo               Int                     @id @default(autoincrement())
  nome                  String                  @unique @db.VarChar(100)
  complessita           complexity_level
  durata                Int
  costo                 Decimal                 @db.Decimal(10, 2)
  intervento            intervento[]
  richiede_attrezzatura richiede_attrezzatura[]
}

model utente {
  cf          String    @id @db.VarChar(16)
  username    String    @unique @db.VarChar(50)
  password    String    @db.VarChar(255)
  nome        String    @db.VarChar(50)
  cognome     String    @db.VarChar(50)
  datanascita DateTime  @db.Date
  telefono    String    @db.VarChar(20)
  tipoutente  user_type
  dottore     dottore?
  paziente    paziente?

  @@index([tipoutente], map: "idx_utente_tipo")
}

model visita {
  id_visita   Int      @id @default(autoincrement())
  cf_paziente String   @db.VarChar(16)
  cf_dottore  String   @db.VarChar(16)
  dataora     DateTime @db.Timestamp(6)
  motivo      String   @db.Text
  dottore     dottore  @relation(fields: [cf_dottore], references: [cf], onDelete: NoAction)
  paziente    paziente @relation(fields: [cf_paziente], references: [cf], onDelete: NoAction)

  @@index([dataora], map: "idx_visita_data")
}

enum blood_group {
  A_PLUS     @map("A+")
  A_MINUS    @map("A-")
  B_PLUS     @map("B+")
  B_MINUS    @map("B-")
  AB_PLUS    @map("AB+")
  AB_MINUS   @map("AB-")
  ZERO_PLUS  @map("0+")
  ZERO_MINUS @map("0-")
}

enum complexity_level {
  bassa
  media
  alta
}

enum intervention_status {
  programmato
  in_corso
  completato
  annullato
}

enum user_type {
  admin
  dottore
  paziente
}

enum weekday {
  lunedi
  martedi
  mercoledi
  giovedi
  venerdi
  sabato
  domenica
}